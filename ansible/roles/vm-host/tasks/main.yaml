---
- name: enable serial login
  file:
    path: /etc/systemd/system/getty.target.wants/serial-getty@{{ serial_port_name }}.service  
    src: /usr/lib/systemd/system/serial-getty@.service
    owner: root
    group: root
    state: link

- name: start serial login
  service:
    name: serial-getty@{{ serial_port_name }}.service
    state: started
    enabled: true

- name: enable grub submenu
  lineinfile:
    path: "{{ grub_config_file }}"
    state: present
    line: "GRUB_DISABLE_SUBMENU=false"
    regexp: "^GRUB_DISABLE_SUBMENU="
  notify: rebuild grub config

- name: enable grub recovery
  lineinfile:
    path: "{{ grub_config_file }}"
    state: present
    line: "GRUB_DISABLE_RECOVERY=false"
    regexp: "^GRUB_DISABLE_RECOVERY="
  notify: rebuild grub config

- name: add serial to grub terminal output
  lineinfile:
    path: "{{ grub_config_file }}"
    state: present
    line: 'GRUB_TERMINAL_OUTPUT="console serial"'
    regexp: '^GRUB_TERMINAL_OUTPUT='
  notify: rebuild grub config

- name: replace rhgb quiet with serial port config
  replace:
    path: '{{ grub_config_file }}'
    regexp: "^(GRUB_CMDLINE_LINUX=\".+)( rhgb quiet)\"$"
    replace: '\1 {{ serial_substring }}"'
  vars:
    serial_substring: 'console=tty0 console={{ serial_port_name }},115200'
  notify: rebuild grub config

- name: install tools
  yum:
    name:
      - tmux 
      - nmap
      - traceroute
      - bind-utils
      - openldap-clients
      - tcpdump
      - strace
    state: present

- name: install libvirt
  yum:
    name:
      - libvirt-client
      - libvirt-daemon
      - qemu-kvm
      - libvirt-daemon-driver-qemu
      - libvirt-daemon-kvm
      - virt-install
      - bridge-utils
      - rsync
      - virt-viewer
      - python-lxml # used by community.libvirt module
    state: present

- name: Enable and start libvirtd
  service:
    name: libvirtd
    state: started
    enabled: true

- name: create libvirt default pool directory
  file:
    path: "{{ libvirt_image_dir }}"
    owner: root
    group: root
    mode: 755
    state: directory

#- name: initialize libvirt default pool
- name: define libvirt default pool
  community.libvirt.virt_pool:
    name: default
    command: define
    xml: |
      <pool type='dir'>
       <name>default</name>
       <target>
         <path>{{ libvirt_image_dir }}</path>
         <permissions>
           <mode>0755</mode>
           <owner>0</owner>
           <group>0</group>
           <label>system_u:object_r:unlabeled_t:s0</label>
         </permissions>
        </target>
      </pool>

#- name: build libvirt default pool
#  community.libvirt.virt_pool:
#    name: default
#    command: build

#- name: create libvirt default pool
#  community.libvirt.virt_pool:
#    name: default
#    command: create

- name: create libvirt default pool
  community.libvirt.virt_pool:
    name: default
    state: active
    autostart: yes

- name: define libvirt default net
  community.libvirt.virt_net:
    name: default
    command: define
    xml: |
      <network>
        <name>default</name>
        <uuid>9d391665-f52e-4379-94f6-98fc2881bde3</uuid>
        <forward mode='nat'>
          <nat>
            <port start='1024' end='65535'/>
          </nat>
        </forward>
        <bridge name='virbr0' stp='on' delay='0'/>
        <mac address='52:54:00:a8:55:a1'/>
        <ip address='192.168.122.1' netmask='255.255.255.0'>
          <dhcp>
            <range start='192.168.122.2' end='192.168.122.254'/>
          </dhcp>
        </ip>
      </network>

- name: start libvirt default net
  community.libvirt.virt_net:
    name: default
    state: active
    autostart: yes

#- name: enable IP forwarding
- name: enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    sysctl_set: yes
    reload: yes

# ============================================================================
# Network interfaces and bridges
# ============================================================================

# Add the external bridge 
# - name: ext bridge
#   community.general.nmcli:
#     conn_name: br-ext
#     ifname: br-ext
#     type: bridge
#     autoconnect: yes
#     ip4: 192.168.1.100/24
#     gw4: 192.168.1.1
#     dns4: 192.168.1.1
#     dns4_search: lamourine.org
#     state: present

# - name: ext bridge-slave ("{{ ext_interface }}")
#   community.general.nmcli:
#     conn_name: "{{ ext_interface }}"
#     ifname: "{{ ext_interface }}"
#     type: bridge-slave
#     master: br-ext
#     autoconnect: yes
#     state: present

# Add the IPMI network for control of hardware
- name: ipmi bridge
  community.general.nmcli:
    conn_name: br-ipmi
    ifname: br-ipmi
    type: bridge
    autoconnect: yes
    ip4: 172.16.2.2/24
    state: present

- name: ipmi bridge-slave ("{{ ipmi_interface }}")
  community.general.nmcli:
    conn_name: "{{ ipmi_interface }}"
    ifname: "{{ ipmi_interface }}"
    type: bridge-slave
    master: br-ipmi
    autoconnect: yes
    state: present

# Add the Prov network for control plane and provisioning
- name: prov bridge
  community.general.nmcli:
    conn_name: br-prov
    ifname: br-prov
    type: bridge
    autoconnect: yes
    ip4: 172.16.3.2/24
    state: present

- name: prov bridge-slave ("{{ prov_interface }}")
  community.general.nmcli:
    conn_name: "{{ prov_interface }}"
    ifname: "{{ prov_interface }}"
    type: bridge-slave
    master: br-prov
    autoconnect: yes
    state: present

# Add the data network for storage and tenant traffic
- name: data bridge
  community.general.nmcli:
    conn_name: br-data
    ifname: br-data
    type: bridge
    autoconnect: yes
    ip4: 172.16.4.2/24
    state: present

- name: data bridge-slave ("{{ data_interface }}")
  community.general.nmcli:
    conn_name: "{{ data_interface }}"
    ifname: "{{ data_interface }}"
    type: bridge-slave
    master: br-data
    autoconnect: yes
    state: present

        
